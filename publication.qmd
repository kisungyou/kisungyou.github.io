---
pagetitle: "KY-Publications"
title: " "
echo: false
jupyter: python3
section-divs: true
toc: true
toc-location: right
toc-expand: true
toc-title: " "
execute:
  cache: false
---

<!-- --- -->
<!-- pagetitle: "KY-Publications" -->
<!-- title: " " -->
<!-- echo: false -->
<!-- jupyter: python3 -->
<!-- toc: true -->
<!-- toc-location: right -->
<!-- toc-expand: true -->
<!-- toc-title: " " -->
<!-- section-divs: false -->
<!-- keep-md: false -->
<!-- format: -->
<!--   html: -->
<!--     page-layout: article -->
<!-- execute: -->
<!--   cache: false -->
<!-- --- -->

<!-- # flags -->
<!-- - 'published' : Publication -->
<!-- - 'preprint'  : Preprint -->

<!-- :::{.column-page-left} -->
# Publications 

```{python}
import yaml
from IPython.display import display, Markdown, HTML

# load centralized author URLs
with open('list_authors.yaml') as file:
    author_urls = yaml.safe_load(file)
    
centralized_author_urls = author_urls.get("author_urls", {})

def readable_list(_s):
  authors_with_links = [
    f"<a href='{centralized_author_urls.get(aut, '#')}' target='_blank'>{aut}</a>" if aut in centralized_author_urls else aut 
    for aut in _s
  ]
  if len(authors_with_links) < 3:
    return ' and '.join(map(str, authors_with_links))
  *a, b = authors_with_links
  return f"{', '.join(map(str, a))}, and {b}"
  # if len(_s) < 3:
  #   return ' and '.join(map(str, _s))
  # *a, b = _s
  # return f"{', '.join(map(str, a))}, and {b}"

def button(url, str, icon):
    icon_base = icon[:2]
    return f"""<a class="btn btn-outline-dark btn-sm", href="{url}" target="_blank" rel="noopener noreferrer">
        <i class="{icon_base} {icon}" role='img' aria-label='{str}'></i>
        {str}
    </a>"""

yaml_data = yaml.safe_load(open("list_publication.yaml"))
pub_strs = {"pubs": {}, "wps": {}}
for _, data in yaml_data.items():
    title_str = data["title"]
    #print(f"Processing: {title_str}")  # Debugging step
    
    authors = data.get("authors", ["me"])
    authors = [aut if aut != "me" else "<strong>KY</strong>" for aut in authors]
    author_str = readable_list(authors)
    year_str = data["year"]

    buttons = []
    preprint = data.get("preprint")
    if preprint is not None:
        buttons.append(button(preprint, "Preprint", "bi-file-earmark-pdf"))

    github = data.get("github")
    if github is not None:
        buttons.append(button(github, "Code", "bi-github"))

    pub_url = data.get("published_url")
    venue = data.get("venue")
    flag  = data.get("flag")
    working_paper = pub_url is None
    
    pub_str = f'{author_str}. ({year_str}) "{title_str}."'

    # DIFFERENT TYPES
    # 1. published (anywhere)
    # 2. preprint  

    # TYPES-strings
    if flag=="published":
      pub_str = f"<b>{title_str}</b><br> {author_str}. <br> <em>{venue}</em>."
    elif flag=="preprint":
      pub_str = f"<b>{title_str}</b><br> {author_str} ({year_str})."
    
    if flag == "published":
      if pub_url:
        buttons.append(button(pub_url, "Publisher's site", "ai-archive"))
      # Ensure you append to the list even if the year already exists
      if year_str not in pub_strs["pubs"]:
        pub_strs["pubs"][year_str] = []
      pub_strs["pubs"][year_str].append(
        "<li class='list-group-item'>" + pub_str + "<br>" + " ".join(buttons) + "</li>"
      )
    # For preprints
    elif flag == "preprint":
      if year_str not in pub_strs["wps"]:
        pub_strs["wps"][year_str] = []
      pub_strs["wps"][year_str].append(
        "<li class='list-group-item'>" + pub_str + "<br>" + " ".join(buttons) + "</li>"
      )
```

<!--
## Published 
-->

## Published

```{python}
#| label: "journal-year"
#| id: "journal-year"
#| output: asis
for year in sorted(pub_strs["pubs"].keys(), reverse=True):
  display(Markdown(f"### {year}"))
  display(HTML(
    "<ul class='list-group list-group-flush'>"
    + "\n".join(pub_strs["pubs"][year])
    + "</ul>"
  ))
```

## Preprint

```{python}
#| label: "preprint-year"
#| id: "preprint-year"
#| output: asis
for year in sorted(pub_strs["wps"].keys(), reverse=True):
  #display(Markdown(f"### {year}" + "{#" + f"not-published-{year}" + "}"))
  display(HTML(
    "<ul class='list-group list-group-flush'>" + '\n'.join(pub_strs["wps"][year]) + "</ul>"
  ))
```





<!-- ::: -->