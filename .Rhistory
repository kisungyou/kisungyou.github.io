t = i)  # Use index to avoid mismatches
}))
# Plot
plot_now = ggplot(densities, aes(x, density, color = factor(t))) +
geom_line(size = 1) +
scale_color_viridis_d(name = "Interpolation") +
theme_bw() +
theme(legend.position = "none") +
theme(panel.grid = element_blank()) +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(panel.border = element_rect(linewidth=2))
plot_path = file.path(dirname(getwd()),"images","figure_001_FisherRao.png")
ggsave(plot_path, plot=plot_now, width=5.25, height=4, dpi=300)
rm(list=ls())
graphics.off()
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Function to compute the Fisher-Rao geodesic path between two Beta distributions
beta_geodesic <- function(alpha1, beta1, alpha2, beta2, t_seq) {
params <- lapply(t_seq, function(t) {
a_t <- (1 - t) * alpha1 + t * alpha2
b_t <- (1 - t) * beta1 + t * beta2
if (a_t > 0 & b_t > 0) {
return(c(a_t, b_t))  # Return as a numeric vector instead of a list
} else {
return(NULL)
}
})
params <- Filter(Negate(is.null), params)  # Remove invalid parameter pairs
return(params)
}
# Set parameters for two Beta distributions
alpha1 <- 2; beta1 <- 5
alpha2 <- 5; beta2 <- 2
# Define a sequence of interpolation points (t in [0,1])
t_seq <- seq(0, 1, length.out = 11)
# Generate the geodesic path
params <- beta_geodesic(alpha1, beta1, alpha2, beta2, t_seq)
# Generate densities for visualization
x_vals <- seq(0, 1, length.out = 100)
densities <- do.call(rbind, lapply(seq_along(params), function(i) {
a_t <- as.numeric(params[[i]][1])  # Explicitly convert to numeric
b_t <- as.numeric(params[[i]][2])  # Explicitly convert to numeric
data.frame(x = x_vals,
density = dbeta(x_vals, a_t, b_t),
t = i)  # Use index to avoid mismatches
}))
# Plot
plot_now = ggplot(densities, aes(x, density, color = factor(t))) +
geom_line(size = 1) +
scale_color_viridis_d(name = "Interpolation") +
theme_bw() +
theme(legend.position = "none") +
theme(panel.grid = element_blank()) +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(panel.border = element_rect(linewidth=2))
plot_path = file.path(dirname(getwd()),"images","figure_001_FisherRao.png")
ggsave(plot_path, plot=plot_now, width=5.25, height=4, dpi=300)
rm(list=ls())
graphics.off()
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Function to compute the Fisher-Rao geodesic path between two Beta distributions
beta_geodesic <- function(alpha1, beta1, alpha2, beta2, t_seq) {
params <- lapply(t_seq, function(t) {
a_t <- (1 - t) * alpha1 + t * alpha2
b_t <- (1 - t) * beta1 + t * beta2
if (a_t > 0 & b_t > 0) {
return(c(a_t, b_t))  # Return as a numeric vector instead of a list
} else {
return(NULL)
}
})
params <- Filter(Negate(is.null), params)  # Remove invalid parameter pairs
return(params)
}
# Set parameters for two Beta distributions
alpha1 <- 2; beta1 <- 5
alpha2 <- 5; beta2 <- 2
# Define a sequence of interpolation points (t in [0,1])
t_seq <- seq(0, 1, length.out = 11)
# Generate the geodesic path
params <- beta_geodesic(alpha1, beta1, alpha2, beta2, t_seq)
# Generate densities for visualization
x_vals <- seq(0, 1, length.out = 100)
densities <- do.call(rbind, lapply(seq_along(params), function(i) {
a_t <- as.numeric(params[[i]][1])  # Explicitly convert to numeric
b_t <- as.numeric(params[[i]][2])  # Explicitly convert to numeric
data.frame(x = x_vals,
density = dbeta(x_vals, a_t, b_t),
t = i)  # Use index to avoid mismatches
}))
# Plot
plot_now = ggplot(densities, aes(x, density, color = factor(t))) +
geom_line(size = 1) +
scale_color_viridis_d(name = "Interpolation") +
theme_bw() +
theme(legend.position = "none") +
theme(panel.grid = element_blank()) +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(panel.border = element_rect(linewidth=2))
plot_path = file.path(dirname(getwd()),"_images","figure_001_FisherRao.png")
ggsave(plot_path, plot=plot_now, width=6, height=4, dpi=300)
rm(list=ls())
graphics.off()
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Function to compute the Fisher-Rao geodesic path between two Beta distributions
beta_geodesic <- function(alpha1, beta1, alpha2, beta2, t_seq) {
params <- lapply(t_seq, function(t) {
a_t <- (1 - t) * alpha1 + t * alpha2
b_t <- (1 - t) * beta1 + t * beta2
if (a_t > 0 & b_t > 0) {
return(c(a_t, b_t))  # Return as a numeric vector instead of a list
} else {
return(NULL)
}
})
params <- Filter(Negate(is.null), params)  # Remove invalid parameter pairs
return(params)
}
# Set parameters for two Beta distributions
alpha1 <- 2; beta1 <- 5
alpha2 <- 5; beta2 <- 2
# Define a sequence of interpolation points (t in [0,1])
t_seq <- seq(0, 1, length.out = 11)
# Generate the geodesic path
params <- beta_geodesic(alpha1, beta1, alpha2, beta2, t_seq)
# Generate densities for visualization
x_vals <- seq(0, 1, length.out = 100)
densities <- do.call(rbind, lapply(seq_along(params), function(i) {
a_t <- as.numeric(params[[i]][1])  # Explicitly convert to numeric
b_t <- as.numeric(params[[i]][2])  # Explicitly convert to numeric
data.frame(x = x_vals,
density = dbeta(x_vals, a_t, b_t),
t = i)  # Use index to avoid mismatches
}))
# Plot
plot_now = ggplot(densities, aes(x, density, color = factor(t))) +
geom_line(size = 1) +
scale_color_viridis_d(name = "Interpolation") +
theme_bw() +
theme(legend.position = "none") +
theme(panel.grid = element_blank()) +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(panel.border = element_rect(linewidth=2))
plot_path = file.path(dirname(getwd()),"images","figure_001_FisherRao.png")
ggsave(plot_path, plot=plot_now, width=6, height=4, dpi=300)
rm(list=ls())
graphics.off()
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(MASS)  # For mvrnorm
library(dplyr)
# Simulate ACG-like samples
set.seed(123)
Sigma <- matrix(c(2, 1, 1, 3), ncol=2)  # Example scatter matrix
samples <- mvrnorm(n = 500, mu = c(0, 0), Sigma = Sigma)
samples <- samples / sqrt(rowSums(samples^2))  # Project to unit circle
# Convert to data frame
df <- as.data.frame(samples)
colnames(df) <- c("x", "y")
# Plot
ggplot(df, aes(x, y)) +
geom_point(alpha = 0.5, color = "blue") +
geom_density_2d(color = "red") +
coord_fixed() +
theme_minimal() +
ggtitle("Angular Central Gaussian (ACG) Sampled Directions")
# setup -------------------------------------------------------------------
rm(list=ls())
graphics.off()
library(pacman)
pacman::p_load(ggplot2,
rstudioapi,
MASS,
dplyr,
plotly)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(MASS)    # For mvrnorm (multivariate normal sampling)
library(plotly)  # For 3D visualization
# Set seed for reproducibility
set.seed(123)
# Define scatter matrix (controls shape of ACG distribution)
Sigma <- matrix(c(3, 1, 0,
1, 2, 1,
0, 1, 1), ncol=3)
# Sample from a zero-mean Gaussian with covariance Sigma
n_samples <- 1000
samples <- mvrnorm(n = n_samples, mu = c(0, 0, 0), Sigma = Sigma)
# Project to the unit sphere
samples <- samples / sqrt(rowSums(samples^2))
# Convert to a data frame
df <- data.frame(x = samples[,1], y = samples[,2], z = samples[,3])
# Create an interactive 3D scatter plot
plot_ly(df, x = ~x, y = ~y, z = ~z, type = "scatter3d", mode = "markers",
marker = list(size = 3, color = df$z, colorscale = "Viridis")) %>%
layout(scene = list(
aspectmode = 'data',
xaxis = list(title = "X"),
yaxis = list(title = "Y"),
zaxis = list(title = "Z")
))
# setup -------------------------------------------------------------------
rm(list=ls())
graphics.off()
library(pacman)
pacman::p_load(ggplot2,
rstudioapi,
MASS,
dplyr,
plotly)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set seed for reproducibility
set.seed(123)
# Define scatter matrix (determines ACG spread)
Sigma <- matrix(c(2, 1, 1, 3), ncol=2)
# Sample from a Gaussian
samples <- mvrnorm(n = 1000, mu = c(0, 0), Sigma = Sigma)
# Normalize to lie on the unit circle (ACG transformation)
samples <- samples / sqrt(rowSums(samples^2))
# Convert to a data frame
df <- as.data.frame(samples)
colnames(df) <- c("x", "y")
# Create a beautiful 2D scatter + density plot
ggplot(df, aes(x, y)) +
# Background gradient for aesthetics
geom_tile(data = expand.grid(x = seq(-1, 1, length.out = 100),
y = seq(-1, 1, length.out = 100)),
aes(x, y, fill = sqrt(x^2 + y^2)), alpha = 0.15) +
scale_fill_gradient(low = "#F2F2F2", high = "#D8D8D8") +
# Points with transparency to highlight density
geom_point(color = "#0072B2", alpha = 0.5, size = 1.2) +
# Contour lines for density estimation
geom_density_2d(color = "#D55E00", size = 0.8, linetype = "solid") +
# Circular reference line (unit circle)
annotate("path", x = cos(seq(0, 2 * pi, length.out = 200)),
y = sin(seq(0, 2 * pi, length.out = 200)), color = "black", size = 0.7, linetype = "dashed") +
# Theme adjustments for a clean, modern look
coord_fixed() +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none") +
ggtitle("Angular Central Gaussian (ACG) Distribution") +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
# setup -------------------------------------------------------------------
rm(list=ls())
graphics.off()
library(pacman)
pacman::p_load(ggplot2,
rstudioapi,
MASS,
dplyr,
plotly)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set seed for reproducibility
set.seed(123)
# Define scatter matrix (determines ACG spread)
Sigma <- matrix(c(2, 1, 1, 3), ncol=2)
# Sample from a Gaussian
samples <- mvrnorm(n = 1000, mu = c(0, 0), Sigma = Sigma)
# Normalize to lie on the unit circle (ACG transformation)
samples <- samples / sqrt(rowSums(samples^2))
# Convert to a data frame
df <- as.data.frame(samples)
colnames(df) <- c("x", "y")
# Create a beautiful 2D scatter + density plot
ggplot(df, aes(x, y)) +
# Background gradient for aesthetics
geom_tile(data = expand.grid(x = seq(-1, 1, length.out = 100),
y = seq(-1, 1, length.out = 100)),
aes(x, y, fill = sqrt(x^2 + y^2)), alpha = 0.15) +
scale_fill_gradient(low = "#F2F2F2", high = "#D8D8D8") +
# Points with transparency to highlight density
geom_point(color = "#0072B2", alpha = 0.5, size = 1.2) +
# Contour lines for density estimation
geom_density_2d(color = "#D55E00", linewidth = 0.8, linetype = "solid") +
# Circular reference line (unit circle)
annotate("path", x = cos(seq(0, 2 * pi, length.out = 200)),
y = sin(seq(0, 2 * pi, length.out = 200)), color = "black", size = 0.7, linetype = "dashed") +
# Theme adjustments for a clean, modern look
coord_fixed() +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(linewidth=2),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
# Create a beautiful 2D scatter + density plot
plot_now <- ggplot(df, aes(x, y)) +
# Background gradient for aesthetics
geom_tile(data = expand.grid(x = seq(-1, 1, length.out = 100),
y = seq(-1, 1, length.out = 100)),
aes(x, y, fill = sqrt(x^2 + y^2)), alpha = 0.15) +
scale_fill_gradient(low = "#F2F2F2", high = "#D8D8D8") +
# Points with transparency to highlight density
geom_point(color = "#0072B2", alpha = 0.5, size = 1.2) +
# Contour lines for density estimation
geom_density_2d(color = "#D55E00", linewidth = 0.8, linetype = "solid") +
# Circular reference line (unit circle)
annotate("path", x = cos(seq(0, 2 * pi, length.out = 200)),
y = sin(seq(0, 2 * pi, length.out = 200)), color = "black", size = 0.7, linetype = "dashed") +
# Theme adjustments for a clean, modern look
coord_fixed() +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(linewidth=2),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
plot_path = file.path(dirname(getwd()),"images","figure_002_ACG.png")
ggsave(plot_path, plot=plot_now, width=6, height=4, dpi=300)
# setup -------------------------------------------------------------------
rm(list=ls())
graphics.off()
library(pacman)
pacman::p_load(ggplot2,
rstudioapi,
MASS,
dplyr,
plotly)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set seed for reproducibility
set.seed(123)
# Define scatter matrix (determines ACG spread)
Sigma <- matrix(c(2, 1, 1, 3), ncol=2)
# Sample from a Gaussian
samples <- mvrnorm(n = 1000, mu = c(0, 0), Sigma = Sigma)
# Normalize to lie on the unit circle (ACG transformation)
samples <- samples / sqrt(rowSums(samples^2))
# Convert to a data frame
df <- as.data.frame(samples)
colnames(df) <- c("x", "y")
# Create a beautiful 2D scatter + density plot
plot_now <- ggplot(df, aes(x, y)) +
# Background gradient for aesthetics
geom_tile(data = expand.grid(x = seq(-1, 1, length.out = 100),
y = seq(-1, 1, length.out = 100)),
aes(x, y, fill = sqrt(x^2 + y^2)), alpha = 0.15) +
scale_fill_gradient(low = "#F2F2F2", high = "#D8D8D8") +
# Points with transparency to highlight density
geom_point(color = "#0072B2", alpha = 0.5, size = 1.2) +
# Contour lines for density estimation
geom_density_2d(color = "#D55E00", linewidth = 0.8, linetype = "solid") +
# Circular reference line (unit circle)
annotate("path", x = cos(seq(0, 2 * pi, length.out = 200)),
y = sin(seq(0, 2 * pi, length.out = 200)), color = "black", size = 0.7, linetype = "dashed") +
# Theme adjustments for a clean, modern look
coord_fixed() +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(linewidth=2),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
plot_path = file.path(dirname(getwd()),"images","figure_002_ACG.png")
ggsave(plot_path, plot=plot_now, width=4, height=4, dpi=300)
# setup -------------------------------------------------------------------
rm(list=ls())
graphics.off()
library(pacman)
pacman::p_load(ggplot2,
rstudioapi,
MASS,
dplyr,
plotly)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set seed for reproducibility
set.seed(123)
# Define scatter matrix (determines ACG spread)
Sigma <- matrix(c(2, 1, 1, 3), ncol=2)
# Sample from a Gaussian
samples <- mvrnorm(n = 1000, mu = c(0, 0), Sigma = Sigma)
# Normalize to lie on the unit circle (ACG transformation)
samples <- samples / sqrt(rowSums(samples^2))
# Convert to a data frame
df <- as.data.frame(samples)
colnames(df) <- c("x", "y")
# Create a beautiful 2D scatter + density plot
plot_now <- ggplot(df, aes(x, y)) +
# Background gradient for aesthetics
geom_tile(data = expand.grid(x = seq(-1, 1, length.out = 100),
y = seq(-1, 1, length.out = 100)),
aes(x, y, fill = sqrt(x^2 + y^2)), alpha = 0.15) +
scale_fill_gradient(low = "#F2F2F2", high = "#D8D8D8") +
# Points with transparency to highlight density
geom_point(color = "#0072B2", alpha = 0.5, size = 1.2) +
# Contour lines for density estimation
geom_density_2d(color = "#D55E00", linewidth = 0.8, linetype = "solid") +
# Circular reference line (unit circle)
annotate("path", x = cos(seq(0, 2 * pi, length.out = 200)),
y = sin(seq(0, 2 * pi, length.out = 200)), color = "black", size = 0.7, linetype = "dashed") +
# Theme adjustments for a clean, modern look
coord_fixed() +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(linewidth=2),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
plot_path = file.path(dirname(getwd()),"images","figure_002_ACG.png")
ggsave(plot_path, plot=plot_now, width=3, height=3, dpi=300)
# setup -------------------------------------------------------------------
rm(list=ls())
graphics.off()
library(pacman)
pacman::p_load(ggplot2,
rstudioapi,
MASS,
dplyr,
plotly)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set seed for reproducibility
set.seed(123)
# Define scatter matrix (determines ACG spread)
Sigma <- matrix(c(2, 1, 1, 3), ncol=2)
# Sample from a Gaussian
samples <- mvrnorm(n = 1000, mu = c(0, 0), Sigma = Sigma)
# Normalize to lie on the unit circle (ACG transformation)
samples <- samples / sqrt(rowSums(samples^2))
# Convert to a data frame
df <- as.data.frame(samples)
colnames(df) <- c("x", "y")
# Create a beautiful 2D scatter + density plot
plot_now <- ggplot(df, aes(x, y)) +
# Background gradient for aesthetics
geom_tile(data = expand.grid(x = seq(-1, 1, length.out = 100),
y = seq(-1, 1, length.out = 100)),
aes(x, y, fill = sqrt(x^2 + y^2)), alpha = 0.15) +
scale_fill_gradient(low = "#F2F2F2", high = "#D8D8D8") +
# Points with transparency to highlight density
geom_point(color = "#0072B2", alpha = 0.5, size = 1.2) +
# Contour lines for density estimation
geom_density_2d(color = "#D55E00", linewidth = 0.8, linetype = "solid") +
# Circular reference line (unit circle)
annotate("path", x = cos(seq(0, 2 * pi, length.out = 200)),
y = sin(seq(0, 2 * pi, length.out = 200)), color = "black", size = 0.7, linetype = "dashed") +
# Theme adjustments for a clean, modern look
coord_fixed() +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(linewidth=2),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
plot_path = file.path(dirname(getwd()),"images","figure_002_ACG.png")
ggsave(plot_path, plot=plot_now, width=5, height=3, dpi=300)
# setup -------------------------------------------------------------------
rm(list=ls())
graphics.off()
library(pacman)
pacman::p_load(ggplot2,
rstudioapi,
MASS,
dplyr,
plotly)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set seed for reproducibility
set.seed(123)
# Define scatter matrix (determines ACG spread)
Sigma <- matrix(c(2, 1, 1, 3), ncol=2)
# Sample from a Gaussian
samples <- mvrnorm(n = 1000, mu = c(0, 0), Sigma = Sigma)
# Normalize to lie on the unit circle (ACG transformation)
samples <- samples / sqrt(rowSums(samples^2))
# Convert to a data frame
df <- as.data.frame(samples)
colnames(df) <- c("x", "y")
# Create a beautiful 2D scatter + density plot
plot_now <- ggplot(df, aes(x, y)) +
# Background gradient for aesthetics
geom_tile(data = expand.grid(x = seq(-1, 1, length.out = 100),
y = seq(-1, 1, length.out = 100)),
aes(x, y, fill = sqrt(x^2 + y^2)), alpha = 0.15) +
scale_fill_gradient(low = "#F2F2F2", high = "#D8D8D8") +
# Points with transparency to highlight density
geom_point(color = "#0072B2", alpha = 0.5, size = 1.2) +
# Contour lines for density estimation
geom_density_2d(color = "#D55E00", linewidth = 0.8, linetype = "solid") +
# Circular reference line (unit circle)
annotate("path", x = cos(seq(0, 2 * pi, length.out = 200)),
y = sin(seq(0, 2 * pi, length.out = 200)), color = "black", size = 0.7, linetype = "dashed") +
# Theme adjustments for a clean, modern look
coord_fixed() +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(linewidth=2),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
plot_path = file.path(dirname(getwd()),"images","figure_002_ACG.png")
ggsave(plot_path, plot=plot_now, width=4, height=4, dpi=300)
str(news)
str(news)
